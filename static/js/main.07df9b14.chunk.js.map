{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["line","App","useState","baseValue","setBaseValue","isDialog","setDialog","selectedValue","setSelectedValue","getSystemDate","date","setDate","affiliation","setAffiliation","name","setName","showValue","setShowValue","dateHistoryList","setDateHistoryList","affiliationHistoryList","setAffiliationHistoryList","nameHistoryList","setNameHistoryList","dataHistoryJsxList","i","length","push","affiliationHistoryJsxList","nameHistoryJsxList","previewValue","_Dialog","isDisplay","readOnly","value","type","list","onChange","e","target","id","placeholder","onClick","includes","_Form","_Buttons","window","getSelection","toString","today","Date","getFullYear","getMonth","getDate","styled","div","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07df9b14.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst line = '--------------------------------------------';\n\nconst App = ()=> {\n  const [baseValue, setBaseValue] = useState<string>('');\n  const [isDialog, setDialog] = useState<boolean>(false);\n  const [selectedValue, setSelectedValue] = useState<string>();\n  const [date, setDate] = useState<string>(getSystemDate());\n  const [affiliation, setAffiliation] = useState<string>('');\n  const [name, setName] = useState<string>('');\n  const [showValue, setShowValue] = useState<string>('');\n  const [dateHistoryList, setDateHistoryList] = useState<string[]>([]);\n  const [affiliationHistoryList, setAffiliationHistoryList] = useState<string[]>([]);\n  const [nameHistoryList, setNameHistoryList] = useState<string[]>([]);\n\n  // 日付履歴JSXのリスト\n  const dataHistoryJsxList: JSX.Element[] = [];\n  for(let i = 0; i < dateHistoryList.length; i++){\n    dataHistoryJsxList.push(\n      <option>{dateHistoryList[i]}</option>\n    );\n  }\n\n  // 所属履歴JSXのリスト\n  const affiliationHistoryJsxList: JSX.Element[] = [];\n  for(let i = 0; i < affiliationHistoryList.length; i++){\n    affiliationHistoryJsxList.push(\n      <option>{affiliationHistoryList[i]}</option>\n    );\n  }\n  \n  // 名前履歴JSXのリスト\n  const nameHistoryJsxList: JSX.Element[] = [];\n  for(let i = 0; i < nameHistoryList.length; i++){\n    nameHistoryJsxList.push(\n      <option>{nameHistoryList[i]}</option>\n    );\n  }\n\n  // プレビューに表示する値(所属の入力があれば括弧をつける)\n  let previewValue = '';\n  if(affiliation != '') {\n    previewValue = `${date} ${affiliation})${name}\\n\\n${selectedValue}\\n${line}\\n`;\n  } else {\n    previewValue = `${date} ${name}\\n\\n${selectedValue}\\n${line}\\n`;\n  }\n\n  return (\n    <>\n      {/* ダイアログ */}\n      <_Dialog isDisplay={isDialog}>\n        <dialog>\n          <span>■プレビュー</span>\n          <textarea readOnly value={previewValue} />\n\n          <span>■日付</span>\n          <input type=\"text\" value={date} list=\"dateList\" onChange={(e)=>{\n            setDate(e.target.value);\n          }}/>\n           <datalist id=\"dateList\">{dataHistoryJsxList}</datalist>\n\n          <span>■所属</span>\n          <input type=\"text\" value={affiliation} placeholder=\"例）CSC\" list=\"affiliationList\" onChange={(e)=>{\n            setAffiliation(e.target.value);\n          }}/>\n          <datalist id=\"affiliationList\">{affiliationHistoryJsxList}</datalist>\n\n          <span>■名前</span>\n          <input type=\"text\" value={name} placeholder=\"例）〇〇様\" list=\"nameList\" onChange={(e)=>{\n            setName(e.target.value);\n          }}/>\n          <datalist id=\"nameList\">{nameHistoryJsxList}</datalist>\n\n          <button onClick={(e)=>{\n            setDialog(false);\n            setAffiliation('');\n            setName('');\n          }}>キャンセル</button>\n\n          <button onClick={(e)=>{\n            // 所属の入力があれば括弧をつける\n            if(affiliation != '') {\n              setShowValue(showValue + date + ' ' + affiliation + ')' + name + '\\n\\n' + selectedValue + '\\n' + line + '\\n');\n            } else {\n              setShowValue(showValue + date + ' ' + name + '\\n\\n' + selectedValue + '\\n' + line + '\\n');\n            }\n            setDialog(false);\n\n            if(!dateHistoryList.includes(date)){\n              dateHistoryList.push(date);\n              setDateHistoryList(dateHistoryList);\n            }\n            if(!affiliationHistoryList.includes(affiliation)){\n              affiliationHistoryList.push(affiliation);\n              setAffiliationHistoryList(affiliationHistoryList);\n            }\n            if(!nameHistoryList.includes(name)){\n              nameHistoryList.push(name);\n              setNameHistoryList(nameHistoryList);\n            }\n\n            // 初期化\n            setAffiliation('');\n            setName('');\n\n          }}>確定</button>\n        </dialog>\n      </_Dialog>\n\n      {/* 左エリア */}\n      <_Form>\n        <span>　■ベーステキスト</span>\n        <textarea value={baseValue} onChange={(e)=>{\n          setBaseValue(e.target.value);\n        }} />\n      </_Form>\n\n      {/* 中央エリア */}\n      <_Buttons>\n        <button onClick={()=>{\n          setDialog(true);\n          setSelectedValue(window.getSelection()?.toString());\n\n        }}>抽出</button>\n\n        <button onClick={()=>{\n           setShowValue('');\n        }}>リセット</button>\n      </_Buttons>\n\n      {/* 右エリア */}\n      <_Form>\n        <span>　■抽出結果</span>\n        <textarea value={showValue}/>\n      </_Form>\n    </>\n  );\n}\n\nexport default App;\n\n// システム日付を初期値に設定\nconst getSystemDate = () => {\n  \tlet today = new Date(); \n  \tconst year = today.getFullYear();\n\t  const month = today.getMonth()+1;\n  \tconst day = today.getDate();\n    return year + '/' + month + '/' + day;\n}\n\nconst _Form = styled.div`\n  background-color: #b0ee97;\n  display: inline-block;\n  vertical-align: top;\n  width: calc(50% - 40px);\n  height: 100%;\n  & textarea {\n    resize:none;\n    margin-left: 10px;\n    margin-bottom: 10px;\n    width: calc(100% - 20px);\n    height: calc(100% - 30px);\n    box-sizing: border-box; \n  }\n  & span {\n    font-size: 15px;\n  }\n`;\n\nconst _Buttons = styled.div`\n  background-color: #b0ee97;\n  display: inline-block;\n  vertical-align: top;\n  width: 80px;\n  height: 100%;\n  display: inline-flex;\n  flex-flow: column;\n  justify-content: center;\n  & button {\n    width: 100%;\n    margin-bottom: 20px;\n  }\n`;\n\nconst _Dialog = styled.div<{\n  isDisplay: boolean;\n}>`\n  display: ${props => props.isDisplay?'block':'none'};\n  background-color: #0000007f;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  & span {\n    font-size: 15px;\n  }\n  & dialog {\n    background-color: white;\n    display: inline-block;\n    width: 50%;\n    height: 300px;\n    top: 50%;\n    left: 50%;\n    padding: 2%;\n    transform: translate(-50%,-50%);\n  }\n  & textarea {\n    resize:none;\n    width: 100%;\n    height: 100px;\n  }\n  & input {\n    width: 100%;\n    height: 20px;\n  }\n  & button {\n    width: 100px;\n    height: 30px;\n    margin-top: 5px;\n    margin-right: 5px;\n    bottom: 10px;\n  }\n  \n`;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}