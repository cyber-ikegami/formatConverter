{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","today","Date","year","getFullYear","month","getMonth","day","getDate","useState","value","setValue","isDialog","setDialog","selectedValue","setSelectedValue","date","setDate","affiliation","setAffiliation","name","setName","showValue","setShowValue","dateHistoryList","setDateHistoryList","affiliationHistoryList","setAffiliationHistoryList","nameHistoryList","setNameHistoryList","dataHistoryJsxList","i","length","push","affiliationHistoryJsxList","nameHistoryJsxList","_Dialog","isDisplay","type","list","onChange","e","target","id","placeholder","onClick","includes","_Form","_Buttons","window","getSelection","toString","styled","div","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2de00f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n// import './App.css';\n\nconst App = ()=> {\n  // システム日付を初期値に設定\n\tlet today = new Date(); \n\tconst year = today.getFullYear();\n\tconst month = today.getMonth()+1;\n\tconst day = today.getDate();\n\n  const [value, setValue] = useState<string>('test');\n  const [isDialog, setDialog] = useState<boolean>(false);\n  const [selectedValue, setSelectedValue] = useState<string>();\n  const [date, setDate] = useState<string>(year + '/' + month + '/' + day);\n  const [affiliation, setAffiliation] = useState<string>('');\n  const [name, setName] = useState<string>('');\n  const [showValue, setShowValue] = useState<string>('');\n  const [dateHistoryList, setDateHistoryList] = useState<string[]>([]);\n  const [affiliationHistoryList, setAffiliationHistoryList] = useState<string[]>([]);\n  const [nameHistoryList, setNameHistoryList] = useState<string[]>([]);\n\n  // 日付履歴JSXのリスト\n  const dataHistoryJsxList: JSX.Element[] = [];\n  for(let i = 0; i < dateHistoryList.length; i++){\n    dataHistoryJsxList.push(\n      <option>{dateHistoryList[i]}</option>\n    );\n  }\n\n  // 所属履歴JSXのリスト\n  const affiliationHistoryJsxList: JSX.Element[] = [];\n  for(let i = 0; i < affiliationHistoryList.length; i++){\n    affiliationHistoryJsxList.push(\n      <option>{affiliationHistoryList[i]}</option>\n    );\n  }\n  \n  // 名前履歴JSXのリスト\n  const nameHistoryJsxList: JSX.Element[] = [];\n  for(let i = 0; i < nameHistoryList.length; i++){\n    nameHistoryJsxList.push(\n      <option>{nameHistoryList[i]}</option>\n    );\n  }\n\n  return (\n    <>\n      {/* ダイアログ */}\n      <_Dialog isDisplay={isDialog}>\n        <dialog>\n          {/* テキストボックス */}\n          <span>■日付</span>\n          <input type=\"text\" value={date} list=\"dateList\" onChange={(e)=>{\n            setDate(e.target.value);\n          }}/>\n           <datalist id=\"dateList\">{dataHistoryJsxList}</datalist>\n\n          <span>■所属</span>\n          <input type=\"text\" value={affiliation} placeholder=\"例）CSC\" list=\"affiliationList\" onChange={(e)=>{\n            setAffiliation(e.target.value);\n          }}/>\n          <datalist id=\"affiliationList\">{affiliationHistoryJsxList}</datalist>\n\n          <span>■名前</span>\n          <input type=\"text\" value={name} placeholder=\"例）〇〇様\" list=\"nameList\" onChange={(e)=>{\n            setName(e.target.value);\n          }}/>\n          <datalist id=\"nameList\">{nameHistoryJsxList}</datalist>\n\n          {/* キャンセルボタン */}\n          <button onClick={(e)=>{\n            setDialog(false);\n\n            // 初期化\n            //setDate('');\n            setAffiliation('');\n            setName('');\n          }}>キャンセル</button>\n\n          {/* 確定ボタン */}\n          <button onClick={(e)=>{\n            setShowValue(showValue + date + ' ' + affiliation + ')' + name + '\\n' + selectedValue + '\\n--------------------------------------------\\n');\n            setDialog(false);\n\n            if(!dateHistoryList.includes(date)){\n              dateHistoryList.push(date);\n              setDateHistoryList(dateHistoryList);\n            }\n            if(!affiliationHistoryList.includes(affiliation)){\n              affiliationHistoryList.push(affiliation);\n              setAffiliationHistoryList(affiliationHistoryList);\n            }\n            if(!nameHistoryList.includes(name)){\n              nameHistoryList.push(name);\n              setNameHistoryList(nameHistoryList);\n            }\n\n            // 初期化\n            // setDate('');\n            setAffiliation('');\n            setName('');\n\n          }}>確定</button>\n        </dialog>\n      </_Dialog>\n\n      {/* 左エリア */}\n      <_Form>\n        {/* 入力テキストエリア */}\n        <textarea value={value} onChange={(e)=>{\n          setValue(e.target.value);\n        }} />\n      </_Form>\n\n      {/* 中央エリア */}\n      <_Buttons>\n        {/* 抽出ボタン */}\n        <button onClick={()=>{\n          setDialog(true);\n          setSelectedValue(window.getSelection()?.toString());\n          // alert(dateHistoryList.length);\n        }}>抽出</button>\n\n        {/* リセットボタン */}\n        <button onClick={()=>{\n           setShowValue('');\n        }}>リセット</button>\n      </_Buttons>\n\n      {/* 右エリア */}\n      <_Form>\n        {/* 出力結果テキストエリア  */}\n        <textarea value={showValue}/>\n      </_Form>\n    </>\n  );\n}\n\nexport default App;\n\nconst _Test = styled.div`\n  color: #ffb700;\n  font-size: 30px;\n  font-weight: 600;\n`;\n\nconst _Form = styled.div`\n  background-color: #b0ee97;\n  display: inline-block;\n  vertical-align: top;\n  width: calc(50% - 40px);\n  height: 100%;\n  & textarea {\n    margin-left: 10px;\n    margin-bottom: 10px;\n    width: calc(100% - 20px);\n    height: calc(100% - 30px);\n  }\n`;\n\nconst _Buttons = styled.div`\n  background-color: #eed297;\n  display: inline-block;\n  vertical-align: top;\n  width: 80px;\n  height: 100%;\n  display: inline-flex;\n  flex-flow: column;\n  justify-content: center;\n  & button {\n    width: 100%;\n  }\n`;\n\nconst _Dialog = styled.div<{\n  isDisplay: boolean;\n}>`\n  display: ${props => props.isDisplay?'block':'none'};\n  background-color: #0000007f;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  //text-align: right;\n  & span {\n    font-size: 15px;\n  }\n  & dialog {\n    background-color: white;\n    display: inline-block;\n    width: 50%;\n    height: 30%;\n    top: 50%;\n    left: 50%;\n    padding: 2%;\n    transform: translate(-50%,-50%);\n  }\n  & input {\n    width: 100%;\n    height: 10%;\n  }\n  & button {\n    width: 100px;\n    height: 30px;\n    margin-top: 5px;\n    margin-right: 5px;\n    bottom: 10px;\n  }\n`;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}